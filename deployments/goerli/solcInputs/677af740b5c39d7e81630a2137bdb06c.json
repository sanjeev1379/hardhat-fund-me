{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport './PriceConvertor.sol';\n\ncontract FundMe {\n    using PriceConvertor for uint;\n\n    uint public mimimumUsd = 10 * 1e18; // 1000000000000000000 ETH\n    address[] public funders;\n    mapping(address=>uint) public funderAddressToPrice;\n\n    address public owner;\n    AggregatorV3Interface priceFeed;\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n\n    function fund() public payable {\n        // want to send minimum USD for fund\n        // require(priceConversionRate(msg.value) > mimimumUsd, \"don't have enfough amount\");\n\n        // with library we need to call something like below\n        // require(priceConversionRate(msg.value) > mimimumUsd, \"don't have enfough amount\"); // or\n        require(msg.value.priceConversionRate(priceFeed) > mimimumUsd, \"don't have enfough amount\"); // here bydefault msg.value is first paramter if we need to send second Params use msg.value.priceConversionRate(234)\n\n        funders.push(msg.sender);\n        funderAddressToPrice[msg.sender] = msg.value;\n    }\n\n    function withdraw() public _onlyOwner {\n        for(uint fundIndex = 0; fundIndex < funders.length; fundIndex++) {\n            address funder = funders[fundIndex];\n            funderAddressToPrice[funder] = 0;\n        }\n        funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{ value : address(this).balance}(\"\");\n        require(callSuccess, \"Transfer Failed\");\n    }\n\n    modifier _onlyOwner() {\n        require(owner == msg.sender, \"Your are not owner!\");\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n\n}"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvertor {\n\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint) {\n        // ABI\n        // Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        (,int price, , ,) = priceFeed.latestRoundData();\n        return uint(price*1e10);\n\n    }\n\n    function priceConversionRate(uint ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint) {\n        uint ethPrice = getPrice(priceFeed);\n        // 3000_000000000000000000 = ETH / USD Price\n        // 1_000000000000000000 = ETH\n        uint ethPriceInUsd = ( ethAmount * ethPrice ) / 1e18;\n        return ethPriceInUsd;\n\n    }\n\n    function getVersion() internal view returns(uint) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        return priceFeed.version();\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}